dnl Process this file with autoconf to produce a configure script.
AC_INIT(saveme.c)
AC_CONFIG_HEADER(config.h)

dnl Our default prefix is /usr/ since most people will be using tsocks
dnl on Linux systems and that /usr/local/ stuff annoys them
AC_PREFIX_DEFAULT(/usr)

dnl if libdir hasn't been set by the user default it to /lib since
dnl tsocks needs to be on the root partition if put in the
dnl /etc/ld.so.preload file
test "$libdir" = "\${exec_prefix}/lib" && libdir="/lib"

dnl Arguments we allow
AC_ARG_ENABLE(socksdns,
[  --enable-socksdns	force dns lookups to use tcp ])
AC_ARG_ENABLE(debug,
[  --disable-debug	disable ALL error messages from tsocks ])
AC_ARG_ENABLE(oldmethod,
[  --enable-oldmethod	use the old method to override connect ])
AC_ARG_ENABLE(hostnames,
[  --disable-hostnames	disable hostname lookups for socks servers ])
AC_ARG_WITH(conf,
[  --with-conf=<file>   location of configuration file (/etc/tsocks.conf default)],[
if test "${withval}" = "yes" ; then
  AC_MSG_ERROR("--with-conf requires the location of the configuration file as an argument")
else
  AC_DEFINE_UNQUOTED(CONF_FILE, "${withval}")
fi
], [
  AC_DEFINE_UNQUOTED(CONF_FILE, "/etc/tsocks.conf")
])


dnl -----------------------------------
dnl Get hostname and other information.
dnl -----------------------------------
AC_CANONICAL_HOST

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S

dnl Checks for standard header files.
AC_HEADER_STDC

dnl Check for the dynamic loader function header
AC_CHECK_HEADER(dlfcn.h,,AC_MSG_ERROR("dlfcn.h not found"))

dnl Check for the socket header
AC_CHECK_HEADER(sys/socket.h,,AC_MSG_ERROR("sys/socket.h not found"))

dnl Check for the fcntl header
AC_CHECK_HEADER(fcntl.h,,AC_MSG_ERROR("fcntl.h not found"))

dnl Other headers we're interested in
AC_CHECK_HEADERS(unistd.h)

dnl Checks for library functions.
AC_CHECK_FUNCS(strcspn strdup strerror strspn strtol,,[ 
	       AC_MSG_ERROR("Required function not found")])

dnl Check for strsep, we provide it ourselves if they don't have it
AC_CHECK_FUNC(strsep,, AC_DEFINE(DEFINE_STRSEP))

dnl Check for socket
AC_CHECK_FUNC(socket,, [
  AC_CHECK_LIB(socket, socket,,AC_MSG_ERROR("socket function not found"))])

dnl Check for inet_aton here
AC_CHECK_FUNC(inet_aton, AC_DEFINE(HAVE_INET_ATON), [
  AC_CHECK_FUNC(inet_addr, AC_DEFINE(HAVE_INET_ADDR), [
    AC_CHECK_LIB(nsl, inet_addr, [ AC_DEFINE(HAVE_INET_ADDR)
                                   LIBS="${LIBS} -lnsl" ], [
		AC_MSG_ERROR("Neither inet_aton or inet_addr present")])])])

dnl Look for gethostbyname (needed by tsocks and inspectsocks)
AC_CHECK_FUNC(gethostbyname, AC_DEFINE(HAVE_GETHOSTBYNAME), [
  AC_CHECK_LIB(xnet, gethostbyname, AC_DEFINE(HAVE_GETHOSTBYNAME), [
	       AC_MSG_ERROR(["gethostbyname not found, name lookups in " \
		      "tsocks and inspectsocks disabled"])])])

dnl The simple programs (saveme and inspectsocks) have no further 
dnl requirements, so save the libs needed here and use them in the
dnl Makefile
SIMPLELIBS=${LIBS}
LIBS=

dnl Checks for libraries.
dnl Replace `main' with a function in -ldl:
AC_CHECK_LIB(dl, dlsym,,AC_MSG_ERROR("libdl is required"))

dnl If we're using gcc here define _GNU_SOURCE
AC_MSG_CHECKING(for RTLD_NEXT from dlfcn.h)
AC_EGREP_CPP(yes,
[
 #include <dlfcn.h>
 #ifdef RTLD_NEXT
	yes
 #endif
], [
  AC_MSG_RESULT(yes)
], [
  AC_MSG_RESULT(no)
  AC_MSG_CHECKING(for RTLD_NEXT from dlfcn.h with _GNU_SOURCE)
  AC_EGREP_CPP(yes,
  [
   #define _GNU_SOURCE
   #include <dlfcn.h>
   #ifdef RTLD_NEXT
	yes
   #endif
  ], [
    AC_MSG_RESULT(yes)
    AC_DEFINE(USE_GNU_SOURCE)
  ], [
    AC_MSG_RESULT(no)
    AC_DEFINE(USE_OLD_DLSYM)
    oldmethod="yes"
  ])    
])

if test "${enable_socksdns}" = "yes"; then
  AC_DEFINE(USE_SOCKS_DNS)
fi

if test "${enable_oldmethod}" = "yes"; then
  AC_DEFINE(USE_OLD_DLSYM)
  oldmethod="yes"
fi

if test "x${enable_debug}" = "x"; then
  AC_DEFINE(DEBUG)
fi

if test "x${enable_hostnames}" = "x"; then
  AC_DEFINE(HOSTNAMES)
fi

if test "${enable_socksdns}" = "yes" -a \
        "x${enable_hostnames}" = "x" ; then
  AC_MSG_ERROR("--enable-socksdns is not valid without --disable-hostnames")
fi

dnl If we have to use the old method of overriding connect (i.e no
dnl RTLD_NEXT) we need to know the location of libc, so we call
dnl ldd to list the dependancies of /bin/ls and look for libc. 
if test "${oldmethod}" = "yes"; then
  dnl Check that an awk is available, sets AWK
  AC_PROG_AWK

  dnl Find grep, it should always be somewhere in the path
  dnl but for safety's sake
  AC_CHECK_PROG(GREP, grep, grep)

  dnl Look for ldd, it should always be in the path too
  AC_CHECK_PROG(LDD, ldd, ldd)

  dnl Check location of libc
  AC_MSG_CHECKING(location of libc)
  LIBC=`$LDD /bin/ls | $GREP "libc" | $AWK ' { print $3 } '`

  AC_DEFINE_UNQUOTED(LIBC, "${LIBC}")
  AC_MSG_RESULT($LIBC)
fi

dnl Check which prototype of connect will work for us
proto1='(int, __CONST_SOCKADDR_ARG, socklen_t);'
imp1='(int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len) {'
proto2='(int, struct sockaddr *, int);'
imp2='(int __fd, struct sockaddr * __addr, int __len) {'
proto3='(int, const struct sockaddr *, socklen_t);'
imp3='(int __fd, const struct sockaddr * __addr, socklen_t __len) {'
AC_MSG_CHECKING(for correct connect prototype)
AC_TRY_RUN([
  #include <sys/socket.h>
  int connect$proto1
  int main() {return(0);}
], [PROTO="$proto1"; IMP="$imp1"; AC_DEFINE(USE_UNION)], [
  AC_TRY_RUN([
    #include <sys/socket.h>
    int connect$proto2
    int main() {return(0);}
  ], [PROTO="$proto2"; IMP="$imp2"], [
    AC_TRY_RUN([
      #include <sys/socket.h>
      int connect$proto3
      int main() {return(0);}
    ], [PROTO="$proto3"; IMP="$imp3"], PROTO="", PROTO="")
  ], PROTO="")
], PROTO="")
AC_MSG_RESULT($PROTO)
AC_DEFINE_UNQUOTED(CONNECT_PROTOTYPE, [int connect${PROTO}])
AC_DEFINE_UNQUOTED(CONNECT_FUNCTION, [int connect${IMP}])
AC_DEFINE_UNQUOTED(REALCONNECT_PROTOTYPE, [static int (*realconnect)${PROTO}])

SPECIALLIBS=${LIBS}
AC_SUBST(SPECIALLIBS)
LIBS=${SIMPLELIBS}

AC_OUTPUT(Makefile)
